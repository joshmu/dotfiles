---
description: Process for generating a periodic summary report of work activities.
globs:
alwaysApply: false
---
# Rule: Create Summary Report

This document outlines the process for generating a periodic summary report of work activities.

## Report Objectives

A great Markdown summary report should be:

-   **Clear and Structured**: Use hierarchical headings (`#`, `##`) to organize content logically.
-   **Concise**: Summarize key points without unnecessary detail. Use bulleted lists for readability.
-   **Visually Clear**: Use **bold** for important terms and *italics* for emphasis.
-   **Contextual**: Include inline `code` snippets for technical references.
-   **Reproducible**: Where applicable, integrate code, outputs, and links to original sources (like Jira tickets or Git commits).

## 1. Define Scope

- **Prompt User**: Ask for the scope of the report. The primary scopes are "Vervio" and "Breville".
- **Determine Timeframe**: Ask for the reporting period (e.g., "weekly", "monthly"). Default to weekly (last 7 days).

## 2. Gather Data

Based on the defined scope, gather data from the following sources. If a tool is not available or enabled, note its omission in the final report.

### Git History

-   **Identify Repositories**: Use the `tech-stack-info.mdc` to get the list of repositories for the specified scope.
-   **Fetch Commits**: For each repository, run `git log` and save the output to a temporary file. Use the following parameters:
    -   `--author="<email>"` (use email from `tech-stack-info.mdc`)
    -   `--since="1 week ago"` (or the specified timeframe)
    -   `--pretty=format:"- %s (%h) on %ad"`
    -   `--date=short`
-   **Collect Commits**: Read the temporary file to aggregate the formatted commit messages from all relevant repositories.

### Jira Tickets

-   **Project Key**: Use the `IH` project key from `tech-stack-info.mdc`.
-   **JQL Query**: Execute a search with the following JQL to find all interactions (assigned, reported, or watched) across all projects:
    -   `(assignee = "<ASSIGNEE_ID>" OR reporter = "<ASSIGNEE_ID>" OR watcher = "<ASSIGNEE_ID>" OR assignee WAS "<ASSIGNEE_ID>") AND updated >= -7d ORDER BY updated DESC`
    -   Adjust the timeframe (`-7d`) based on the user's request.
-   **Tool Optimization**: Request essential fields to identify interaction type: `summary,status,updated,assignee,reporter`.
-   **Synthesize**: When creating the report, for each ticket, check if the user's email matches the `assignee` or `reporter` email. If neither, the interaction is as a `Watcher` or `Past Assignee`. Prepend the interaction type (e.g., `[Assignee]`, `[Reporter]`, `[Watcher]`) to the ticket summary.

### Confluence Documents

-   **CQL Query**: Execute a search with the following CQL:
    -   `contributor = currentUser() AND lastModified > startOfWeek()`
    -   Adjust the timeframe as needed.
-   **Tool Optimization**: Search for recently modified pages and include only the title and last modified date.

### GitHub Activity (for Vervio scope)

-   Use the GitHub MCP tool to search for activity by the user (`mu@joshmu.com`) in the `vervio-digital/ai-retail-agent` repository within the specified timeframe.

## 3. Synthesize and Format Report

-   **Structure**: Create a Markdown document with the following structure:
    -   A main heading with the report title (e.g., `# Breville - Weekly Summary - YYYY-MM-DD`).
    -   Subheadings for each data source (e.g., `## Git Commits`, `## Jira Tickets`).
    -   Bulleted lists for the items under each subheading.
-   **Content**: Populate the sections with the data gathered in the previous step. If no activity is found for a source, state "No activity found for this period."

## 4. Save the Report in Obsidian

-   **Determine Path**:
    -   If scope is "Breville", path is `/Users/joshmu/Desktop/obsidian/areas/breville/summaries/`.
    -   If scope is "Vervio", path is `/Users/joshmu/Desktop/obsidian/areas/vervio/summaries/`.
-   **Generate Filename**:
    -   Use the format: `YYYY-MM-DD-<scope>-<period>-summary.md`.
    -   Example: `2024-07-29-breville-weekly-summary.md`.
-   **Save File**: Write the generated Markdown content to the specified file path.
-   **Confirmation**: Inform the user that the report has been created and provide the file path.

---

*This document should be updated as new patterns and conventions are discovered.*
